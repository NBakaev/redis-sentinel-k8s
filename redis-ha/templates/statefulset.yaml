apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis-ha.fullname" . }}
  labels:
    {{- include "redis-ha.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  serviceName: {{ template "redis-ha.fullname" . }}-headless
  updateStrategy:
    type: RollingUpdate
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "redis-ha.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "redis-ha.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "redis-ha.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: REDIS_PUBLISHED_PORT
            value: "{{.Values.redis.redisHostPort}}"

          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 6379
              hostPort: {{.Values.redis.redisHostPort}}
              name: redis-port
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - /check_port.sh
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - /check_port.sh
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          volumeMounts:
            - name: redis-data
              mountPath: /data

        - name: sentinel-{{ .Chart.Name }}
          env:
          - name: REDIS_PUBLISHED_PORT
            value: "{{.Values.redis.redisHostPort}}"

          - name: SENTINEL_PUBLISHED_PORT
            value: "{{.Values.redis.sentinelHostPort}}"
          - name: SENTINEL
            value: "true"

          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 26379
              hostPort: {{.Values.redis.sentinelHostPort}}
              name: sentinel-port
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - /check_port.sh
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - /check_port.sh
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          volumeMounts:
            - name: redis-sentinel-data
              mountPath: /data

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Gi
    - metadata:
        name: redis-sentinel-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Gi
